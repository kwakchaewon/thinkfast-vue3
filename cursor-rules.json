[
  {
    "id": "file-directory-naming-rule",
    "description": "디렉토리 이름은 kebab-case, 컴포넌트 파일 이름은 PascalCase를 사용해야 합니다.",
    "match": "src/**/*",
    "pattern": "(src/.*/[A-Z][a-zA-Z0-9]+\\.vue$|src/.*/[a-z0-9]+(-[a-z0-9]+)*/)",
    "suggestion": "디렉토리는 kebab-case로, 컴포넌트 파일은 PascalCase로 작성하세요. 예: user-profile, TokenGenerateModal.vue"
  },
  {
    "id": "composition-api-rule",
    "description": "Composition API setup 함수 안에서 ref, computed, watch는 상단에 선언되어야 합니다.",
    "match": "src/**/*.vue",
    "mustContain": ["setup(", "ref(", "computed("],
    "suggestion": "Composition API에서 반응형 선언은 setup 함수 내부 최상단에 배치하세요."
  },
  {
    "id": "ref-reactive-naming-rule",
    "description": "ref 변수는 'Ref' 접미사를 사용하고 타입이 명시되어야 합니다.",
    "match": "src/**/*.ts",
    "pattern": "const\\s+([a-zA-Z0-9]+Ref)\\s*=\\s*ref<[^>]+>\\(",
    "suggestion": "ref 변수는 xxxRef처럼 명명하고 제네릭 타입을 명시하세요. 예: const modalVisibleRef = ref<boolean>(false);"
  },
  {
    "id": "event-naming-rule",
    "description": "이벤트 핸들러는 'handle' 접두사를 사용하고, 템플릿에서는 kebab-case로 작성해야 합니다.",
    "match": "src/**/*.vue",
    "mustContain": ["handle"],
    "pattern": "@[a-zA-Z0-9]+=\"handle[A-Z][a-zA-Z0-9]+\"",
    "suggestion": "handleClick, handleSubmit처럼 'handle' 접두사를 사용하고, 템플릿에서는 @submit 처럼 kebab-case를 사용하세요."
  },
  {
    "id": "eslint-prettier-rule",
    "description": "ESLint 및 Prettier 포맷터를 프로젝트에 적용해야 합니다.",
    "match": ".eslintrc.js",
    "mustContain": ["plugin:vue/vue3-recommended", "plugin:@typescript-eslint/recommended", "prettier"],
    "suggestion": "eslint-plugin-vue, @typescript-eslint, prettier를 설정에 포함하여 코드 스타일을 통일하세요."
  },
  {
    "id": "import-order-rule",
    "description": "import 구문은 외부 → 내부 순서로 정렬하고, 그룹 간 줄바꿈이 있어야 합니다.",
    "match": "src/**/*.ts",
    "pattern": "import .* from 'vue';\\n\\nimport .* from '@/.*';",
    "suggestion": "import는 외부 라이브러리 → 절대경로(@) → 상대경로 순으로 정렬하고, 그룹 간 줄바꿈을 포함하세요."
  }
]
